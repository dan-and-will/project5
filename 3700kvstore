#!/usr/bin/env python

import sys, socket, select, time, json, random

LEADER = 1
CANDIDATE = 2
FOLLOWER = 3

class KVstore:

    def __init__(self, my_id, replica_ids):
        self.id = my_id
        self.term = 0
        self.set_state(FOLLOWER)
        self.last_leader_hb = time.time()
        self.replicas = replica_ids
        self.quorum = (len(self.replicas) + 1) / 2 + 1

        # Connect to the network. All messages to/from other replicas and clients will
        # occur over this socket
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        self.sock.connect(my_id)

    def set_state(self, state):
        self.state = state
        self.in_election = False
        if self.state == FOLLOWER:
            self.timeout = random.randint(300, 500) / 1000.0
            self.last_leader_hb = time.time()
            self.leader = 'FFFF'
        elif self.state == CANDIDATE:
            self.votes = 0
            self.timeout = 0.5
            self.leader = 'FFFF'
            self.election_start = time.time()
        elif self.state == LEADER:
            self.leader = self.id
            self.timeout = 0.25
            self.RPC_sent = 0

    def send_hb(self):
        self.RPC_sent = time.time()
        msg = json.dumps({'src': self.id, 'dst': 'FFFF', 'leader': self.id, 'type': 'heartbeat', 'term': self.term})
        self.sock.send(msg)

    def send_vote_request(self):
        msg = json.dumps({'src': self.id, 'dst': 'FFFF', 'leader': self.leader, 'type': 'vote_request', 'term': self.term})
        self.sock.send(msg)

    def cast_vote(self, candidate_id):
        self.in_election = True
        msg = json.dumps({'src': self.id, 'dst': candidate_id, 'leader': 'FFFF', 'type': 'vote'})
        self.sock.send(msg)

    def start_election(self):
        self.in_election = True
        self.term += 1
        self.set_state(CANDIDATE)
        self.send_vote_request()

    def redirect(self, msg):
        msg = json.dumps({'src': self.id, 'dst': msg['src'], 'leader': self.leader, 'type': 'redirect', 'MID': msg['MID']})
        self.sock.send(msg)

    def handle_msg(self, msg):
        msg_type = msg['type']
        if self.state == FOLLOWER:
            if msg_type in ('get', 'put',):
                self.redirect(msg)
            elif msg_type == 'vote_request':
                if not self.in_election and self.term < msg['term']:
                    self.cast_vote(msg['src'])
            elif msg_type == 'heartbeat':
                self.last_leader_hb = time.time()
                self.leader = msg['src']
                self.term = msg['term']

        elif self.state == CANDIDATE:
            if msg_type == 'vote':
                self.votes += 1
                if self.votes + 1 >= self.quorum:
                    self.set_state(LEADER)
            elif msg_type == 'heartbeat':
                if msg['term'] > self.term:
                    self.set_state(FOLLOWER)
                    self.leader = msg['src']

        elif self.state == LEADER:
            if msg_type == 'get':
                msg = json.dumps({'src': self.id, 'dst': msg['src'], 'leader': self.id, 'type': 'fail', 'MID': msg['MID']})
                self.sock.send(msg)
            elif msg_type == 'put':
                msg = json.dumps({'src': self.id, 'dst': msg['src'], 'leader': self.id, 'type': 'fail', 'MID': msg['MID']})
                self.sock.send(msg)
            elif msg_type == 'vote_request':
                if not self.in_election and msg['term'] > self.term:
                    self.cast_vote(msg['src'])
            elif msg_type == 'heartbeat':
                if msg['term'] > self.term:
                    self.term = msg['term']
                    self.set_state(FOLLOWER)
                    self.leader = msg['src']

    def run(self):
        while True:
            ready = select.select([self.sock], [], [], 0.1)[0]
            if ready:
                msg_raw = self.sock.recv(32768)
                if len(msg_raw) > 0:
                    msg = json.loads(msg_raw)
                    self.handle_msg(msg)

            to = time.time() - self.timeout
            if self.state == FOLLOWER:
                if to >= self.last_leader_hb:
                    if not self.in_election:
                        self.start_election()

            elif self.state == CANDIDATE:
                if to >= self.election_start:
                    self.start_election()

            elif self.state == LEADER:
                if to >= self.RPC_sent:
                    self.send_hb()

if __name__ == '__main__':
    # Your ID number
    my_id = sys.argv[1]
    # The ID numbers of all the other replicas
    replica_ids = sys.argv[2:]
    kvs = KVstore(my_id, replica_ids)
    kvs.run()
